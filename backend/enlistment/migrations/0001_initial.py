# Generated by Django 4.1.6 on 2023-02-26 05:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    def populate_data(apps, schema_editor):
        from enlistment import models as m
        import datetime
        departments = ["ALL INTERDISCIPLINARY ELECTIVES", "ATENEO TEACHER CENTER", "BIOLOGY", "CHEMISTRY", "CHINESE STUDIES PROGRAM", "CITIZENS MILITARY TRAINING",
                       "COMMUNICATION", "DEPARTMENT OF CATHOLIC EDUCATION PHILOSOPHY AND PRACTICE", 
                       "DEPARTMENT OF CURRICULUM, PEDAGOGY AND ASSESSMENT", "DEPARTMENT OF EDUCATIONAL LEADERSHIP AND MANAGEMENT",
                       "DEVELOPMENT STUDIES PROGRAM", "ECONOMICS", "EDUCATION", "ELECTRONICS, COMPUTER and COMMUNICATIONS ENG.",
                       "ENGLISH", "ENVIRONMENTAL SCIENCE", "EUROPEAN STUDIES", "FILIPINO", "FINANCE AND ACCOUNTING",
                       "FINE ARTS", "HEALTH SCIENCES PROGRAM", "HISTORY", "HUMANITIES", "INFORMATION SYSTEMS AND COMPUTER SCIENCE",
                       "INSTITUTE FOR THE SCIENCE AND ART OF LEARNING AND TEACHING (SALT)", "INTAC", 
                       "INTERDISCIPLINARY STUDIES DEPARTMENT", "JAPANESE STUDIES PROGRAM", "KOREAN STUDIES PROGRAM",
                       "LEADERSHIP AND STRATEGY", "MANAGEMENT", "MANAGEMENT ENGINEERING", "MARKETING AND LAW", "MATHEMATICS",
                       "MODERN LANGUAGES", "NATIONAL SERVICE TRAINING PROGRAM (ADAST)", "NATIONAL SERVICE TRAINING PROGRAM (OSCI)",
                       "NSTP", "OFFICE OF SOCIAL CONCERN AND INVOLVEMENT", "PASTORAL STUDIES", "PATHWAYS TO HIGHER EDUCATION",
                       "PHILOSOPHY", "PHYSICAL EDUCATION", "PHYSICS", "POLITICAL SCIENCE", "PSYCHOLOGY", 
                       "QUANTITATIVE METHODS AND INFORMATION TECHNOLOGY", "SCIENCE BLOCK", "SOCIAL SCIENCES", 
                       "SOCIAL SCIENCES", "THEOLOGY", "THEOLOGY AND MINISTRY PROGRAM"]
                    
        for i in range(len(departments)):
            obj = m.Department(department_name=departments[i])
            obj.save()

        prof_instructor_ids = ["100", "101", "102", "103", "104"]
        prof_first_names = ["Neil Daniel", "Edsel", "Giovanni Angelo", "Patricia Angela", "Luis Rainier"] 
        prof_last_names = ["Bautista", "Beja", "Balaguer", "Abu", "Ligunas"]
        department_id = [24,24,24,24,24 ]
        for i in range(len(prof_first_names)):
            obj = m.Teacher(instructor_id=prof_instructor_ids[i], first_name=prof_first_names[i], last_name=prof_last_names[i],
                            department_id=m.Department.objects.get(pk=department_id[i]))
            obj.save()

        course_codes = ["BS CS", "BSMS CS", "BS CS-DGDD"]
        course_names = ["BACHELOR OF SCIENCE IN COMPUTER SCIENCE", "BACHELOR OF SCIENCE IN COMPUTER SCIENCE", 
                       "BACHELOR OF SCIENCE IN COMPUTER SCIENCE - BACHELOR OF SCIENCE IN DIGITAL GAME DESIGN AND DEVELOPMENT"]

        for i in range(len(course_codes)):
            obj = m.IPS(course_code=course_codes[i], course_name=course_names[i])
            obj.save()
        
        student_ids = [200001, 200715, 200002, 200003, 200004, 200005]
        student_first_names = ["Elmo Lenard", "Mikael Giannes", "Mario Franco", "Luis Mikhael", "Joseph Raymund", "Chino Gabriel"] 
        student_last_names = ["Gumapos", "Bernardino", "Deuna", "Gonzalez", "Izon", "Tesoro"]
        student_course_code =["BS CS-DGDD", "BSMS CS", "BS CS", "BS CS", "BS CS", "BS CS"]
        student_birthday = [ datetime.date(2002, 1, 1), datetime.date(2001, 6, 15), datetime.date(2002, 1, 1),
                             datetime.date(2002, 1, 1), datetime.date(2002, 1, 1), datetime.date(2002, 1, 1)]
        student_year_level = [3,3,3,3,3,3]
        is_enlisted = [True, True, False, False, False, False]

        for i in range(len(student_ids)):
            obj = m.Student(student_id=student_ids[i], first_name=student_first_names[i], last_name = student_last_names[i],
                        course_code = m.IPS.objects.get(pk=student_course_code[i]), birthday = student_birthday[i], 
                        year_level = student_year_level[i], is_enlisted=is_enlisted[i])
            obj.save()

        class_codes = ["CSCI 42", "CSCI 51.01", "CSCI 51.02", "CSCI 181.03"]
        class_names = ["Introduction to Software Engineering", "Operating Systems Lecture", "Operating Systems Laboratory",
                       "Special Topics in Software Engineering: iOS Development"]
        units = [3,3,3,3]
        is_majors = [True,True,True,True]

        for i in range(len(class_codes)):
            obj = m.ClassModel(class_code = class_codes[i], class_name=class_names[i], units=units[i], is_major = is_majors[i])
            obj.save()

        curriculum_classes_courses = ["BS CS", "BSMS CS", "BS CS-DGDD"]
        curriculum_classes_subs = ["CSCI 42", "CSCI 51.01", "CSCI 51.02",]
        # curriculum_classes_years = []
        # curriculum_classes_sems = []
        for i in range(len(curriculum_classes_courses)):
            for j in range(len(curriculum_classes_subs)):
                obj = m.CurriculumClasses(course_code= m.IPS.objects.get(pk=curriculum_classes_courses[i]), 
                                          class_code= m.ClassModel.objects.get(pk=curriculum_classes_subs[j]),
                                          year=3, sem=2)
                obj.save()


        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 42"), class_section = "J", room="F-204",
                     max_slots=25, instructor_id = m.Teacher.objects.get(pk=100), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="TF", start_time = datetime.time(8,0),
                     minutes_per_session=90, school_year="22", sem=2, language="E")
        cul.save()
        
        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 51.01"), class_section = "A", room="F-227",
                     max_slots=25, instructor_id = m.Teacher.objects.get(pk=102), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="MTh", start_time = datetime.time(8,0),
                     minutes_per_session=90, school_year="22", sem=2, language="E")
        cul.save()

        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 51.01"), class_section = "B1", room="F-227",
                     max_slots=25, instructor_id = m.Teacher.objects.get(pk=102), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="MTh", start_time = datetime.time(9,30),
                     minutes_per_session=90, school_year="22", sem=2, language="E")
        cul.save()

        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 51.02"), class_section = "E", room="F-227",
                     max_slots=25, instructor_id = m.Teacher.objects.get(pk=103), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="MTh", start_time = datetime.time(14,0),
                     minutes_per_session=90, school_year="22", sem=2, language="E")
        cul.save()

        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 51.02"), class_section = "D", room="F-227",
                     max_slots=1, instructor_id = m.Teacher.objects.get(pk=103), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="MTh", start_time = datetime.time(12,30),
                     minutes_per_session=90, school_year="22", sem=2, language="E")
        cul.save()
        cul = m.Class(class_code= m.ClassModel.objects.get(pk="CSCI 181.03"), class_section = "S", room="CTC 201B",
                     max_slots=25, instructor_id = m.Teacher.objects.get(pk=104), 
                     department_id=m.Department.objects.get(pk=24), day_of_week="W", start_time = datetime.time(9,0),
                     minutes_per_session=180, school_year="22", sem=2, language="E")
        cul.save()

        cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200001))
        cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=2), student_id=m.Student.objects.get(pk=200001))
        cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=4), student_id=m.Student.objects.get(pk=200001))
        cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200002))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=3), student_id=m.Student.objects.get(pk=200002))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=5), student_id=m.Student.objects.get(pk=200002))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200003))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=3), student_id=m.Student.objects.get(pk=200003))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=4), student_id=m.Student.objects.get(pk=200003))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200004))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=3), student_id=m.Student.objects.get(pk=200004))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=5), student_id=m.Student.objects.get(pk=200004))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200005))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=3), student_id=m.Student.objects.get(pk=200005))
        # cll.save()
        # cll = m.ClassList(class_id = m.Class.objects.get(pk=4), student_id=m.Student.objects.get(pk=200005))
        # cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=1), student_id=m.Student.objects.get(pk=200715))
        cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=2), student_id=m.Student.objects.get(pk=200715))
        cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=4), student_id=m.Student.objects.get(pk=200715))
        cll.save()
        cll = m.ClassList(class_id = m.Class.objects.get(pk=6), student_id=m.Student.objects.get(pk=200715))
        cll.save()
        


    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('class_id', models.AutoField(primary_key=True, serialize=False)),
                ('class_section', models.CharField(max_length=4)),
                ('room', models.CharField(max_length=15)),
                ('max_slots', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(99), django.core.validators.MinValueValidator(0)])),
                ('available_slots', models.IntegerField(default=-1, editable=False)),
                ('day_of_week', models.CharField(choices=[('MTh', 'Mondays & Thursdays'), ('TF', 'Tuesdays & Fridays'), ('W', 'Wednesdays'), ('Sat', 'Saturday')], max_length=20)),
                ('start_time', models.TimeField(help_text='HH:MM')),
                ('minutes_per_session', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(300), django.core.validators.MinValueValidator(0)])),
                ('school_year', models.CharField(choices=[('21', '2021-2022'), ('22', '2022-2023'), ('23', '2023-2024'), ('24', '2024-2025')], max_length=20)),
                ('sem', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(0)])),
                ('language', models.CharField(choices=[('E', 'Eng'), ('F', 'Fil')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ClassModel',
            fields=[
                ('class_code', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('class_name', models.CharField(max_length=50)),
                ('units', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(6), django.core.validators.MinValueValidator(1)])),
                ('is_major', models.BooleanField()),
                ('prerequisite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='enlistment.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='CurriculumClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('sem', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(0)])),
                ('class_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.AutoField(primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='IPS',
            fields=[
                ('course_code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=100)),
                ('subjects', models.ManyToManyField(through='enlistment.CurriculumClasses', to='enlistment.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('instructor_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('department_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.department')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('birthday', models.DateField(help_text='MM/DD/YYYY')),
                ('age', models.PositiveIntegerField(default=18, editable=False)),
                ('year_level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(7), django.core.validators.MinValueValidator(1)])),
                ('is_regular', models.BooleanField(default=True)),
                ('is_enlisted', models.BooleanField(default=False)),
                ('course_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.ips')),
            ],
        ),
        migrations.AddField(
            model_name='curriculumclasses',
            name='course_code',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.ips'),
        ),
        migrations.CreateModel(
            name='ClassList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.class')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.student')),
                ('is_void', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='class',
            name='class_code',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.classmodel'),
        ),
        migrations.AddField(
            model_name='class',
            name='department_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.department'),
        ),
        migrations.AddField(
            model_name='class',
            name='instructor_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enlistment.teacher'),
        ),
        migrations.AddField(
            model_name='class',
            name='students',
            field=models.ManyToManyField(through='enlistment.ClassList', to='enlistment.student'),
        ),
        migrations.RunPython(populate_data),
    ]
